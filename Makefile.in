#---       `booker' 0.0.0 (c) 1978 by Marcin 'Amok' Konarski      ---
#
#	Makefile - this file is integral part of `booker' project.
#
#	i.  You may not $(MAKE) any changes in Copyright information.
#	ii. You must attach Copyright information to any part of every copy
#	    of this software.
#
#Copyright:
#
# You are free to use this program as is, you can redistribute binary
# package freely but:
#  1. You can not use any part of sources of this software.
#  2. You can not redistribute any part of sources of this software.
#  3. No reverse engineering is allowed.
#  4. If you want redistribute binary package you can not demand any fees
#     for this software.
#     You can not even demand cost of the carrier (CD for example).
#  5. You can not include it to any commercial enterprise (for example 
#     as a free add-on to payed software or payed newspaper).
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. Use it at your own risk.

PRJNAME = booker
VERSION = 0
SUBVERSION = 0
EXTRAVERSION = 0
RELEASE = $(VERSION).$(SUBVERSION).$(EXTRAVERSION)

DESTDIR =
prefix = $(DESTDIR)/usr/bin
doc = $(DESTDIR)/usr/share/doc

SHELL = /bin/sh
HS = .h
SS = .c
OS = .o
OOS = .oo
.SUFFIXES:
.SUFFIXES: $(SS) $(OS) $(OOS) $(HS)
CXX = g++
LXX = g++
#LXX = ccmalloc g++
CXXFLAGS = \
					 -W\
					 -Wall\
					 -Wcast-align\
					 -Wconversion\
					 -Werror\
					 -Winline\
					 -Wlarger-than-1024\
					 -Wlong-long\
					 -Wmissing-noreturn\
					 -Wmissing-prototypes\
					 -Wpointer-arith\
					 -Wshadow\
					 -Wsign-compare\
					 -Wstrict-prototypes\
					 -Wundef\
					 -Wwrite-strings
#					 -Wbad-function-cast\
					 -Wid-clash-2\
					 -Wmissing-declarations\
					 -Wnested-externs\
					 -Wtraditional\ #deprecated
HEAVYCXXFLAGS = \
								-pedantic-errors\
								-Waggregate-return\
								-Wcast-qual\
								-Wredundant-decls
FLAGS2 =
ifeq ($(HD),1)
	DB = -D__DEBUGGER_BABUNI__
endif
ifdef NODEBUG
	FLAGS3 = -O3 -fexpensive-optimizations
	FLAGS4 =
else
	FLAGS3 = -g  -g3 -ggdb -ggdb3 -pg -D__DEBUG__ $(DB)
	FLAGS4 =
endif
FLAGS5 = -D_GNU_SOURCE -march=i486
#	-fno-external-templates #deprecated
FLAGS6 =
FLAGS7 =
FLAGS8 = 

FLAGS = $(FLAGS1) $(FLAGS3) $(FLAGS5) $(FLAGS7)
FLAGS0 = $(FLAGS2) $(FLAGS4) $(FLAGS6) $(FLAGS8)

#NODEBUG =
LIBS =
#LIBS += -rdynamic -ldl
LIBS += -lhcore
LIBS += -lhconsole
LIBS += -lhdata
LIBS += -ltools
LIBS += -lmysqlclient
#	LIBS += -l

STATICLIBS =
STATICLIBS += ~/lib/libhconsole.a
STATICLIBS += ~/lib/libhcore.a
STATICLIBS += ~/lib/libtools.a
STATICLIBS += ~/lib/libhdata.a
#STATICLIBS += ~/lib/libmysql_driver.a
#STATICLIBS += ~/lib/libpostgresql_driver.a
STATICLIBS += ~/lib/libdbwrapper.a
STATICLIBS += -lmysqlclient
STATICLIBS += -rdynamic -ldl
STATICLIBS += -lncurses
#STATICLIBS += -lccmalloc

OBJS = 
OBJS += main!
OBJS += cli_options!
OBJS += rc_options
OBJS += variables
OBJS += booker
OBJS += dictionarybankset
OBJS += dictionarybankwindow!
OBJS += dictionarycontractingpartyset
OBJS += dictionarycontractingpartywindow

TARGET = 1exec
ifdef NODEBUG
	TARGET = $(PRJNAME)
endif

OBJS := $(strip $(OBJS))
OBJS := $(patsubst %,%.o, $(OBJS))
OBJS := $(patsubst %!.o,%.oo, $(OBJS))
HDRS := $(patsubst %.o,%.h, $(OBJS))
HDRS := $(patsubst %.oo,%.h, $(HDRS))
HDRS := $(subst main.h,config.h, $(HDRS))
SRCS = $(OBJS:.o=.c)
SRCEXS := $(filter %.oo, $(SRCS))
SRCS := $(filter-out %.oo, $(SRCS))
SRCEXS := $(patsubst %.oo, %.c, $(SRCEXS))

HDRS += 

# implict pattern rule

%.o : %.c
	@echo -n "Compiling \`$@' ... "
	@$(CXX) $(CXXFLAGS) $(HEAVYCXXFLAGS) $(FLAGS) $< -c -o $@ 2>&1 | tee -a make.log
	@echo "done."

# explict rule
# this one is for files that use features that breaks ANSI C++

%.oo : %.c
	@echo -n "Compiling \`$@' ... "
	@$(CXX) $(CXXFLAGS) $(FLAGS) $< -c -o $@ 2>&1 | tee -a make.log
	@echo "done."

#------------------------------------------------------------------------

.DEFAULT:
	@echo "Lack of \`$<'." | tee -a make.log

#phony targets
.PHONY : all dep s static r rebuild c clean tags m mrproper b bin e executable i install

all: dep $(TARGET) $(PRJNAME).info

dep: .depend

.depend: $(SRCS) $(SRCEXS) $(HDRS)
	@echo -n 'Making dependicies ... '
	@set -e; $(CXX) -MM $(SRCS) > .depend
	@set -e; $(CXX) -MM $(SRCEXS) | sed -e s/'\.o\>'/'\.oo'/ >> .depend
	@echo 'done.'

main.oo: main.c
	@echo -n "Compiling \`$@' (program version $(RELEASE)-`date +%Y%m%d`) ... "
	@echo "#define VER \"$(RELEASE)-`date +%Y%m%d`\"" > version.h
	@$(CXX) $(CXXFLAGS) $(FLAGS) $< -c -o $@ 2>&1 | tee -a make.log
	@echo 'done.'

$(PRJNAME).info : $(PRJNAME).texinfo
	@makeinfo $(PRJNAME).texinfo

$(TARGET): $(OBJS)
	@echo -n "Linking \`$@' ... "
	@$(LXX) $(FLAGS0) -o $(TARGET) $(OBJS) $(LIBS) 2>&1 | tee -a make.log
ifdef NODEBUG
	@strip $(TARGET)
endif
	@echo "done."

s: static
static:
	@$(MAKE) LIBS="$(STATICLIBS)"

r: rebuild
rebuild: clean
	$(MAKE) all

c: clean
clean:
	@echo -n "Cleaning ... "
	@/bin/rm -f *~ *.out .*~ .*.swp *.bak *.log *.info .depend
	@/bin/rm -f core
	@/bin/rm -f $(OBJS)
	@/bin/rm -f $(TARGET)
	@echo "done."

tags: $(SRCS) $(SRCEXS) $(HDRS)
	@echo -n "Rehashing tags ... "
	@ctags --langmap=c++:.c ./*.c
	@touch config.h
	@echo "done."

m: mrproper
mrproper: clean
	@echo -n "Purging ... "
	@/bin/rm -f $(PRJNAME) tags config.h make.log
	@echo "done."

b: bin
bin:
	@( export NODEBUG="true";\
	$(MAKE)	-e executable )

e: executable
executable: all
	@/bin/rm -f *~ *.out .*~ .*.swp *.bak *.log .depend
	@/bin/rm -f core
	@/bin/rm -f $(OBJECTS)

i: install
install: $(TARGET)
	@echo "i: you need to become root to do this"
	@install -c -g root -o root -m=u=rwx,g=rx,o=rx $(PRJNAME) $(prefix)
#	@install -D -g root -o root -m=u=rwx,g=rx,o=rx README COPYRIGHT $(doc)/$(PRJNAME)
#	@install -D -g root -o root -m=u=rwx,g=rx,o=rx .$(PRJNAME)rc $(doc)/$(PRJNAME)/examples
	@echo "i: now if you wish you can suid $(TARGET)"

ifneq ($(wildcard .depend),)
include .depend
endif

